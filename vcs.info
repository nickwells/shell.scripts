
# -*- shell-script -*-
#
# dot this file to populate the Git... environment variables.
#
# This only works if you are in a git repository

# getGitVars will set the values of the Git... environment variables
function getGitVars() {
    export GitAuthor=$(git log -1 --format=tformat:'%an')
    export GitCommit=$(git log -1 --format=tformat:'%H')
    export GitDate=$(git   log -1 --date=iso --format=tformat:'%cd')
    export GitTag=$(git    tag -l --points-at $GitCommit)
}

getGitVars

# showGitVars prints the current values of the environment variables
function showGitVars() {
    printf "   Tag: %s\n" "$GitTag"
    printf "Commit: %s\n" "$GitCommit"
    printf "Author: %s\n" "$GitAuthor"
    printf "  Date: %s\n" "$GitDate"
}

# goBuildTags prints out a string suitable to be used as the value to a
# -ldflags parameter as can be given to go build or go install
function goBuildTags() {
    pkg=$1
    if [ -z "$pkg" ]
    then
	echo "no package name has been given" 1>&2
	return
    fi

    now="$(date --utc '+%Y-%m-%d %T +0000')"
    buildUser="$(id --real --user --name)"
    
    ldfTag=$(printf "-X '$pkg.tag=%s'" "$GitTag")
    ldfCommit=$(printf "-X '$pkg.commit=%s'" "$GitCommit")
    ldfAuthor=$(printf "-X '$pkg.author=%s'" "$GitAuthor")
    ldfDate=$(printf "-X '$pkg.date=%s'" "$GitDate")
    ldfBuildDate=$(printf "-X '$pkg.buildDate=%s'" "$now")
    ldfBuildUser=$(printf "-X '$pkg.buildUser=%s'" "$buildUser")

    printf "%s\n" "$ldfTag $ldfCommit $ldfAuthor $ldfDate $ldfBuildDate $ldfBuildUser"
}
